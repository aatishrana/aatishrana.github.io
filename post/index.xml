<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Aatish Rana</title>
    <link>/post.html</link>
    <description>Recent content in Posts on Aatish Rana</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2018, Aatish Rana and the Hugo Authors; all rights reserved.</copyright>
    <lastBuildDate>Fri, 24 Nov 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Design Pattern Abstract Factory</title>
      <link>/post/design-pattern-abstract-factory.html</link>
      <pubDate>Fri, 24 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/design-pattern-abstract-factory.html</guid>
      <description>Design Pattern - Abstract Factory The abstract factory pattern provides an interface for creating families of related or dependent objects without specifying their concrete classes.

If you don’t know what Factory Pattern is, I would encourage you to go through that first.
Done? I will assume you know what factory pattern is from now on.

The abstract factory and factory method are similar to each other, the only difference however is</description>
    </item>
    
    <item>
      <title>Design Pattern Factory</title>
      <link>/post/design-pattern-factory.html</link>
      <pubDate>Wed, 22 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/design-pattern-factory.html</guid>
      <description>Design Pattern - Factory Method The factory method pattern defines an interface for creating an object but lets subclasses decide which class to instantiate. Factory method let the class defer instantiation to subclasses.

If you don’t know what Dependency Injection is, I would encourage you to go through that first.
Done? I will assume you know what dependency injection is from now on.

In every software system, there are 2 type of code * Code which does something cool * Code which glue together the cool code</description>
    </item>
    
    <item>
      <title>Design Pattern Decorator</title>
      <link>/post/design-pattern-decorator.html</link>
      <pubDate>Mon, 20 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/design-pattern-decorator.html</guid>
      <description>Design Pattern - Decorator The decorator pattern attaches additional responsibility to an object dynamically.
Let&amp;rsquo;s say we need to create a restaurant menu, where we are going to prepare and serve different types of dishes. We also need to bill the customer as per the cost of each item.
public class Pizza{ void prepare(){ // preparation code } String description(){ return &amp;quot;pizza&amp;quot;; } int cost(){ return 50; } }  public class Burger{ void prepare(){ // preparation code } String desc(){ return &amp;quot;burger&amp;quot;; } int price(){ return 47; } }  Just like the class Pizza and Burger, we would have to create a lot of other food item classes and then we can possibly use them like this</description>
    </item>
    
    <item>
      <title>Design Pattern Strategy</title>
      <link>/post/design-pattern-strategy.html</link>
      <pubDate>Sat, 18 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/design-pattern-strategy.html</guid>
      <description>Design Patterns - Strategy In the strategy pattern, the method of a class is defined as a separate interface and concrete implementation of that interface is used depending on our need. This allows better decoupling between the method and the class that uses the method.
If you don&amp;rsquo;t know what Polymorphism is I would encourage you to go through that first.

Done? I will assume you know what polymorphism is from now on.</description>
    </item>
    
    <item>
      <title>Dependency Injection</title>
      <link>/post/dependency-injection.html</link>
      <pubDate>Fri, 03 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/dependency-injection.html</guid>
      <description>Dependency Injection, What, Why and How So you have heard of D.I everywhere. You have tried understanding it, but you need a simple explanation.
Let&amp;rsquo;s understand Dependency Injection in as little time n effort as possible.
&amp;lsquo;Dependency&amp;rsquo; as it&amp;rsquo;s name suggest is just telling us that something can not work unless it has that other thing. Now these &amp;lsquo;things&amp;rsquo; can be a Class or a Method or even a Package.</description>
    </item>
    
  </channel>
</rss>